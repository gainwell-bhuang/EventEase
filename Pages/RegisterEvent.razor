@page "/register/{eventId:int}"
@using global::EventEase.Models
@using global::EventEase.Services
@inject IEventService EventService
@inject AttendanceService AttendanceService
@inject UserSessionService UserSessionService
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components

<h3>Register for Event</h3>

@if (eventDetails == null)
{
    <p>Loading event details...</p>
}
else
{
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">@eventDetails.Name</h5>
            <h6 class="card-subtitle mb-2 text-muted">@eventDetails.Date.ToShortDateString()</h6>
            <p class="card-text"><strong>Location:</strong> @eventDetails.Location</p>
            <p class="card-text"><strong>Description:</strong> @eventDetails.Description</p>

            <hr />

            <h5>Attendee Information</h5>

            <EditForm Model="attendee" OnValidSubmit="Register">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-2">
                    <label>Name:</label>
                    <InputText @bind-Value="attendee.Name" class="form-control" />
                    <ValidationMessage For="@(() => attendee.Name)" class="text-danger" />
                </div>

                <div class="mb-2">
                    <label>Email:</label>
                    <InputText @bind-Value="attendee.Email" class="form-control" />
                    <ValidationMessage For="@(() => attendee.Email)" class="text-danger" />
                </div>

                <button class="btn btn-primary mt-3" type="submit" disabled="@isSubmitting">Register</button>

                @if (!string.IsNullOrEmpty(registrationMessage))
                {
                    <p class="text-success mt-2">@registrationMessage</p>
                }
            </EditForm>

            <hr />

            <h5>Registered Attendees</h5>
            <ul>
                @foreach (var attendee in attendees)
                {
                    <li>@attendee.Name (@attendee.Email)</li>
                }
            </ul>
        </div>
    </div>
}

@code {
    [Parameter] public int EventId { get; set; }
    private Event? eventDetails;
    private Attendee attendee = new();
    private string registrationMessage = string.Empty;
    private bool isSubmitting = false;
    private List<Attendee> attendees = new();

    protected override async Task OnInitializedAsync()
    {
        eventDetails = await EventService.GetEventById(EventId);
        attendees = await AttendanceService.GetAttendees(EventId);

        // Check if the user has a session
        var (name, email) = UserSessionService.GetUser();
        if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(email))
        {
            attendee.Name = name;
            attendee.Email = email;
        }

        attendee.EventId = EventId; // Associate attendee with the event
    }

    private async Task Register()
    {
        isSubmitting = true;
        registrationMessage = string.Empty;

        bool success = await AttendanceService.RegisterAttendee(attendee);

        if (success)
        {
            UserSessionService.SetUser(attendee.Name, attendee.Email);
            registrationMessage = "Registration successful!";
            attendees = await AttendanceService.GetAttendees(EventId); // Refresh attendee list
            attendee = new Attendee { EventId = EventId }; // Reset form
        }
        else
        {
            registrationMessage = "Registration failed. Please try again.";
        }

        isSubmitting = false;
    }
}
